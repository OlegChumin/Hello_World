//package materials.lesson_07_08.IV_abstraction_абстракция.interface_and_abstractClass;
//
///**
// * Отличия интерфейса от абстрактного класса:
// * Назначение:
// *
// * Интерфейс определяет "какой" набор методов должен быть реализован, служит как контракт.
// * Абстрактный класс может предоставить некоторую базовую реализацию и определяет "что" объект может делать.
// * Методы:
// *
// * Интерфейс содержит только абстрактные методы (до Java 8) и статические/дефолтные методы (Java 8 и новее).
// * Абстрактный класс может содержать абстрактные и неабстрактные методы.
// * Множественное наследование:
// *
// * Интерфейс позволяет множественное наследование, класс может реализовывать множество интерфейсов.
// * Абстрактный класс не позволяет множественное наследование, класс может наследоваться только от одного абстрактного
// * класса.
// * Состояние:
// *
// * Интерфейс обычно не хранит состояние (исключения - поля по умолчанию, доступные с Java 8).
// * Абстрактный класс может хранить состояние (поля данных).
// * Доступ к модификаторам:
// *
// * В интерфейсе все методы по умолчанию являются public.
// * В абстрактном классе методы могут иметь любые модификаторы доступа.
// * Эти отличия помогают выбрать между использованием интерфейса и абстрактного класса в зависимости от конкретных
// * требований проекта.
// */
//
//// Абстрактный класс
//abstract class Animal {
//    abstract void makeSound();
//
//    void breathe() {
//        System.out.println("Животное дышит");
//    }
//}
//
//// Класс, наследующий абстрактный класс
//class Dog extends Animal {
//    @Override
//    void makeSound() {
//        System.out.println("Собака лает");
//    }
//}
